#!/usr/bin/env perl

use autodie;
use Modern::Perl;
use File::Basename;
use Getopt::Long;
use DateTime;
use Data::Dumper;
use File::stat;
use Time::localtime;
use POSIX qw(strftime);

my $editor = "nvim";

my $help;
my $new;
my $edit;
my $draft;
my $publish;
my $demote;
my $tag = "";
my $date = "";
my $list;
my $edit_all;
my $list_drafts;

Getopt::Long::Configure ("bundling");
GetOptions(
    'help|h' => \$help,
    'new-post|n' => \$new,
    'new-draft|d' => \$draft,
    'promote' => \$publish,
    'demote' => \$demote,
    'edit|e' => \$edit,
    'tag|t=s' => \$tag,
    'date|d=s' => \$date,
    'list|l' => \$list,
    'edit-all|E' => \$edit_all,
    'list-drafts' => \$list_drafts,
);

if ($help) {
    help();
}
elsif ($list_drafts) {
    my $title_pattern = join (" ", @ARGV);
    list_drafts($tag, $date, $title_pattern);
}
elsif ($new) {
    my $title = join (" ", @ARGV);
    create_new_post($title);
}
elsif ($draft) {
    my $title = join (" ", @ARGV);
    create_new_draft($title);
}
elsif ($edit || $edit_all || $list) {
    my $title_pattern = join (" ", @ARGV);
    edit_post($tag, $date, $title_pattern);
}
elsif ($publish) {
    my $title_pattern = join (" ", @ARGV);
    publish($tag, $date, $title_pattern);
}
elsif ($demote) {
    my $title_pattern = join (" ", @ARGV);
    demote($tag, $date, $title_pattern);
}
else {
    help();
}

my $basedir = dirname($0);

sub help {
    my $name = basename($0);
    say <<END
Blog editing script.

Usage:
  $name -h | --help
  $name --new-post <This is the new post title...>
  $name --new-draft <This is the new draft title...>
  $name --list [--tag] [--date] <pattern>
  $name --edit [--tag] [--date] [--edit-all] <pattern>
  $name --promote [--tag] [--date] <pattern>
  $name --demote [--tag] [--date] <pattern>
  $name --list-drafts [--tag] [--date] <pattern>

Options:
  -h --help                     Show this screen.
  -n --new-post                 Create a new post with todays date.
  -d --new-draft                Create a new draft.
  -e --edit [pattern...]        Edit a matching post or draft.
  -l --list [pattern...]        List all posts and drafts matching patterns.
  --promote [pattern...]        Move a draft to a post with todays date.
  --demote [pattern...]         Move a post to a draft, discard the current date set.
  --list-drafts [pattern...]    List all drafts.
  -t --tag=<pat>                Add a tag filter pattern.
  -d --date=<pat>               Add a date filter pattern.
  --edit-all                    Open up all matching files for editing.
END
}

sub make_date {
    my $dt = DateTime->today();
    return $dt->ymd('-');
}

# Keep alphanumerics and -. Transform spaces to underscores. Throw away rest.
# "Pretty" url
sub id_from_title {
    my $title = shift;
    $title = lc($title);
    $title =~ s/[^a-z0-9 -]//g;
    $title =~ s/ /_/g;
    return $title;
}

sub post_path_from_title {
    my $title = shift;
    my $date = make_date();
    my $id = id_from_title($title);
    return dirname($0) . "/posts/$date-$id.markdown";
}

sub draft_path_from_title {
    my $title = shift;
    my $id = id_from_title($title);
    return dirname($0) . "/drafts/$id.markdown";
}

sub create_post {
    my ($path, $title) = @_;
    open my $fh, '>', $path or die "Could not open '$path'";
    print $fh
"---
layout: post
title: \"$title\"
tags: Gaming, Ludum Dare
---

Lorem ipsum...
";

    close $fh;
}

sub create_new_post {
    my $title = shift;
    my $path = post_path_from_title($title);
    unless (-e $path) {
        say "Creating $path";
        create_post($path, $title);
    }
    else {
        say "Opening $path";
    }
    exec ("$editor $path");
}

sub create_new_draft {
    my $title = shift;
    my $path = draft_path_from_title($title);
    unless (-e $path) {
        say "Creating $path";
        create_post($path, $title);
    }
    else {
        say "Opening $path";
    }
    exec("$editor $path");
}

sub has_match {
    my ($what, @patterns) = @_;
    for my $p (@patterns) {
        return 1 if $what =~ /$p/i;
    }
    return 0;
}

sub matches_post {
    my ($post, @patterns) = @_;

    my @items = qw(title tags);
    for my $item (@items) {
        if (has_match($post->{$item}, @patterns)) {
            return 1;
        }
    }
    return 0;
}

sub get_post_metadata {
    my $path = shift;

    my $post = {};

    open my $fh, '<', $path;

    # Fetch latest edited
    my $dt = DateTime->from_epoch(epoch => stat($fh)->mtime);
    $post->{last_edit} = $dt->ymd() . " " . $dt->hms();

    # Load metadata
    <$fh>; # Skip first '---'
    while (my $line = <$fh>) {
        last if $line =~ /^---$/;

        if ($line =~ /^\s*([^:]+):\s+(.+?)\s*$/) {
            $post->{$1} = $2;
        }
    }
    close $fh;

    #say Dumper($post);

    return $post;
}

sub find_matches {
    my ($dir, @patterns) = @_;
    my @matches;

    $dir = dirname($0) . "/$dir";

    opendir (my $dh, $dir);
    while (my $file = readdir($dh)) {
        next if $file =~ /^\./;

        my $found = 0;

        # Can match against id as well
        if (has_match($file, @patterns)) {
            $found = 1;
        }

        # Open and look for title
        my $path = "$dir/$file";
        my $info = get_post_metadata($path);
        my $title = $info->{title};

        if (matches_post($info, @patterns)) {
            $found = 1;
        }

        if ($found) {
            $info->{path} = $path;
            push (@matches, $info);
        }

    }
    return @matches;
}

sub collect_posts {
    my $dir = shift;

    my @posts;
    $dir = dirname($0) . "/$dir";

    opendir (my $dh, $dir);
    while (my $file = readdir($dh)) {
        next if $file =~ /^\./;

        # Open and look for metadata
        my $path = "$dir/$file";
        my $post = get_post_metadata($path);

        $post->{path} = $path;
        if ($post->{published}) { # Hakyll will treat date as published field
            $post->{date} = $post->{published};
        }

        if (!$post->{date} && $file =~ m|^(\d{4}-\d{2}-\d{2})-|) {
            $post->{date} = $1;
        }
        #say Dumper $post;
        push (@posts, $post);
    }
    return @posts;
}

sub print_post {
    my $info = shift;
    say $info->{title};
    my $tags = join(", ", $info->{tags});
    say "  tags: $tags" if $tags;
    say "  path: " . $info->{path};
    if ($info->{date}) {
        say "  date: " . $info->{date};
    }
    else {
        say "  edit: " . $info->{last_edit};
    }
}

sub is_matching {
    my ($info, $tag_pattern, $date_pattern, $title_pattern) = @_;

    return 0 if $info->{title} !~ /$title_pattern/i;

    if ($tag_pattern) {
        return 0 if !$info->{tags};
        return 0 if $info->{tags} !~ /$tag_pattern/i;
    }

    if ($date_pattern) {
        return 0 if !$info->{date};
        return 0 if $info->{date} !~ /$date_pattern/i;
    }

    return 1;
}

sub edit_post {
    my @patterns = @_;

    my @posts;
    push (@posts, collect_posts("drafts"));
    push (@posts, collect_posts("posts"));

    my @matches;
    for my $post (@posts) {
        if (is_matching ($post, @patterns)) {
            push (@matches, $post);
        }
    }

    my $num = scalar @matches;
    if ($num == 0) {
        say "No matching posts";
    }
    elsif ($num == 1) {
        my $info = $matches[0];
        say "One matching post";
        print_post($info);
        if (!$list) {
            say "Opening...";
            exec ("$editor $info->{path}");
        }
    }
    else {
        say "$num matching posts";

        for my $post (@matches) {
            print_post($post);
        }

        if (!$list && $edit_all) {
            say "Opening...";
            my $cmd = "$editor";
            $cmd .= " " . $_->{path} for (@matches);
            exec ($cmd);
        }
    }
}

sub publish {
    my @patterns = @_;

    my @drafts;
    push (@drafts, collect_posts("drafts"));

    my @matches;
    for my $draft (@drafts) {
        if (is_matching ($draft, @patterns)) {
            push (@matches, $draft);
        }
    }

    my $num = scalar @matches;
    if ($num == 0) {
        say "No matching drafts";
    }
    elsif ($num == 1) {
        my $info = $matches[0];
        say "One matching draft";
        print_post($info);
        if (!$list) {
            say "Promoting...";

            my $curr_path = $info->{path};
            my $today = make_date();
            if ($curr_path =~ m|drafts/(.+)$|) {
                my $new_path = "posts/$today-$1";
                say "Moved to $new_path";
                exec ("mv $curr_path $new_path");
            }
            else {
                die "Failed to publish $curr_path";
            }
        }
    }
    else {
        say "$num matching drafts";

        for my $draft (@matches) {
            print_post($draft);
        }
    }
}

sub demote {
    my @patterns = @_;

    my @posts;
    push (@posts, collect_posts("posts"));

    my @matches;
    for my $post (@posts) {
        if (is_matching ($post, @patterns)) {
            push (@matches, $post);
        }
    }

    my $num = scalar @matches;
    if ($num == 0) {
        say "No matching posts";
    }
    elsif ($num == 1) {
        my $info = $matches[0];
        say "One matching post";
        print_post($info);
        if (!$list) {
            say "Demoting...";

            my $curr_path = $info->{path};
            if ($curr_path =~ m|posts/\d{4}-\d{2}-\d{2}-(.+)$|) {
                my $new_path = "drafts/$1";
                say "Moved to $new_path";
                exec ("mv $curr_path $new_path");
            }
            else {
                die "Failed to demote $curr_path";
            }
        }
    }
    else {
        say "$num matching posts";

        for my $post (@matches) {
            print_post($post);
        }
    }
}

sub list_drafts {
    my @patterns = @_;

    my @drafts = collect_posts("drafts");
    my @matches;
    for my $draft (@drafts) {
        if (is_matching ($draft, @patterns)) {
            push (@matches, $draft);
        }
    }

    for my $draft (@matches) {
        print_post($draft);
    }
}

