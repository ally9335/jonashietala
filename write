#!/usr/bin/env perl

use autodie;
use Modern::Perl;
use File::Basename;
use Getopt::Long;
use DateTime;
use Data::Dumper;

my $help;
my $new;
my $edit;
my $draft;

GetOptions(
    'help|h' => \$help,
    'new|n' => \$new,
    'edit|e' => \$edit,
    'draft|d' => \$draft,
);

if ($help) {
    help();
}
elsif ($new) {
    my $title = join (" ", @ARGV);
    create_new_post($title);
}
elsif ($draft) {
    my $title = join (" ", @ARGV);
    create_new_draft($title);
}
elsif ($edit) {
    edit_post(@ARGV);
}
else {
    help();
}

my $basedir = dirname($0);

sub help {
    say <<END
--help -h

-n [title...]
--new [title...]
    Create a new post with url /blog/yyyy/mm/dd/id

-d [title...]
--draft [title...]
    Create a new draft with url /blog/yyyy/mm/dd/id

-e pattern
--edit pattern
    Edit post, either url or title, matching pattern.
    If several matches, print a list of matches.
    If unique match launch editor.
END
}

sub make_date {
    my $dt = DateTime->today();
    return $dt->ymd('-');
}

# Keep alphanumerics and -. Transform spaces to underscores. Throw away rest.
# "Pretty" url
sub id_from_title {
    my $title = shift;
    $title = lc($title);
    $title =~ s/[^a-z0-9 -]//g;
    $title =~ s/ /_/g;
    return $title;
}

sub path_from_id {
    my $id = shift;
    my $date = make_date();
    return "$date-$id.markdown";
}

sub path_from_title {
    my $title = shift;
    my $id = id_from_title($title);
    return path_from_id($id);
}

sub post_path_from_title {
    return dirname($0) . "/posts/" . path_from_title(@_);
}

sub draft_path_from_title {
    return dirname($0) . "/drafts/" . path_from_title(@_);
}

sub create_post {
    my ($path, $title) = @_;
    open my $fh, '>', $path or die "Could not open '$path'";
    print $fh
"---
layout: post
title: $title
tags:
---

Lorem ipsum...
";

    close $fh;
}

sub create_new_post {
    my $title = shift;
    my $path = post_path_from_title($title);
    unless (-e $path) {
        say "Creating $path";
        create_post($path, $title);
    }
    else {
        say "Opening $path";
    }
    exec ("vim $path");
}

sub create_new_draft {
    my $title = shift;
    my $path = draft_path_from_title($title);
    unless (-e $path) {
        say "Creating $path";
        create_post($path, $title);
    }
    else {
        say "Opening $path";
    }
    exec("vim $path");
}

sub has_match {
    my ($what, @patterns) = @_;
    for my $p (@patterns) {
        return 1 if $what =~ /$p/i;
    }
    return 0;
}

sub matches_post {
    my ($post, @patterns) = @_;

    my @items = qw(title tags);
    for my $item (@items) {
        if (has_match($post->{$item}, @patterns)) {
            return 1;
        }
    }
    return 0;
}

sub get_post_metadata {
    my $path = shift;

    my $post = {};

    open my $fh, '<', $path;
    my $title;
    <$fh>; # Skip first '---'
    while (my $line = <$fh>) {
        last if $line =~ /^---$/;

        if ($line =~ /^\s*([^:]+):\s+(.+?)\s*$/) {
            $post->{$1} = $2;
        }
    }
    close $fh;

    #say Dumper($post);

    return $post;
}

sub find_matches {
    my ($dir, @patterns) = @_;
    my @matches;

    $dir = dirname($0) . "/$dir";

    opendir (my $dh, $dir);
    while (my $file = readdir($dh)) {
        next if $file =~ /^\./;

        my $found = 0;

        # Can match against id as well
        if (has_match($file, @patterns)) {
            $found = 1;
        }

        # Open and look for title
        my $path = "$dir/$file";
        my $info = get_post_metadata($path);
        my $title = $info->{title};

        if (matches_post($info, @patterns)) {
            $found = 1;
        }

        if ($found) {
            $info->{path} = $path;
            push (@matches, $info);
        }

    }
    return @matches;
}

sub print_post {
    my $info = shift;
    say $info->{title};
    say "  tags: " . join(", ", $info->{tags});
    say "  path: " . $info->{path};
}

sub edit_post {
    my @patterns = @_;

    my @matches;
    push (@matches, find_matches ("drafts", @patterns));
    push (@matches, find_matches ("posts", @patterns));

    my $num = scalar @matches;
    if ($num == 0) {
        say "No matching posts";
    }
    elsif ($num == 1) {
        my $info = $matches[0];
        say "One match, opening";
        print_post($info);
        exec ("vim $info->{path}");
    }
    else {
        say "$num matching posts";

        for my $post (@matches) {
            print_post($post);
        }
    }
}

