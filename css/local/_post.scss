@use "../global/fonts" as *;
@use "../global/font_size" as *;
@use "../global/spacing" as *;
@use "../components/system" as *;

article.article-content {
  @include full-bleed-wrapper;

  a {
    word-wrap: break-word;
  }

  & > * + * {
    margin-block-start: var(--space-xs);
  }

  figure {
    @include overflow-bleed;
    text-align: center;

    figcaption {
      font-style: italic;
      max-inline-size: none;
    }
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    & > a:not(:first-of-type) {
      text-decoration: underline;
    }

    &:not(:first-child) {
      margin-block-start: var(--space-m);
    }
  }

  /*
   * Code
   */
  pre,
  code {
    font-family: $code-font-family;
    // Hack is quite a bit larger than the other fonts
    // Should maybe use Triplicate instead?
    font-size: 0.95rem;
    // font-size: var(--font-size-s);
    // max-inline-size: none;
  }

  pre code {
    padding: 0;
    width: 100%;
    max-inline-size: none;
    // --measure: 100ch;
  }
  pre.wide {
    @include overflow-bleed;
  }
  pre {
    max-inline-size: none;
    // padding: 0.4em 0.6em;
    padding: var(--space-xs);
    // padding-top: var(--space-s);
    overflow-wrap: normal;
    overflow: auto;
  }
  code {
    padding: 0.2rem;
    margin: 0;
  }

  // mmh... This isn't very pretty I know.
  // But I guess it's good enough.
  pre {
    code.highlight::before {
      float: right;
      font-size: var(--font-size-s);
      color: var(--melange_a_ui);
      position: relative;
      top: -0.5rem;
      left: 0.1rem;
    }
    code.highlight.python::before {
      content: "python";
    }
    code.highlight.fish::before {
      content: "fish";
    }
    code.highlight.c::before {
      content: "c";
    }
    code.highlight.bash::before {
      content: "bash";
    }
    code.highlight.html::before {
      content: "html";
    }
    code.highlight.js::before {
      content: "js";
    }
    code.highlight.haskell::before {
      content: "haskell";
    }
    code.highlight.pollen::before {
      content: "pollen";
    }
    code.highlight.racket::before {
      content: "racket";
    }
    code.highlight.json::before {
      content: "json";
    }
    code.highlight.md::before {
      content: "markdown";
    }
    code.highlight.css::before {
      content: "css";
    }
    code.highlight.diff::before {
      content: "diff";
    }
    code.highlight.lua::before {
      content: "lua";
    }
    code.highlight.markdown::before {
      content: "markdown";
    }
    code.highlight.ml::before {
      content: "ml";
    }
    code.highlight.perl::before {
      content: "perl";
    }
    code.highlight.ruby::before {
      content: "ruby";
    }
    code.highlight.rust::before {
      content: "rust";
    }
    code.highlight.scss::before {
      content: "scss";
    }
    code.highlight.shell::before {
      content: "shell";
    }
    code.highlight.vhdl::before {
      content: "vhdl";
    }
    code.highlight.vim::before {
      content: "vimscript";
    }
    code.highlight.xml::before {
      content: "xml";
    }
    code.highlight.yaml::before {
      content: "yaml";
    }
  }

  /*
   * Quotes
   */
  & blockquote {
    font-size: 95%;
    padding-inline-start: var(--space-m);
    padding-block: var(--space-2xs);

    & > * + * {
      margin-block-start: var(--space-xs);
    }
  }
  & > blockquote {
    border-left: 3px solid var(--color-text);
  }
  .epigraph {
    margin-block: var(--space-l);
    font-style: italic;
  }
  blockquote > footer {
    font-size: 90%;
    text-align: right;
  }

  /*
   * Tables
   */
  table {
    @extend %serif;
    // Need tabular numbers to align properly
    font-feature-settings: "kern" on, "tnum" on;
  }
  th,
  td {
    padding: var(--space-3xs) var(--space-s) var(--space-3xs) 0;
  }

  // This is just for one single post
  table.movie-table {
    width: 100%;

    td:first-of-type {
      width: 25ch;
    }
  }
  table.center {
    margin: 0 auto;
  }

  /*
   * Horizontal rules
   */
  hr {
    // Remove article based spacing
    // FIXME should that be a variable?
    margin: var(--space-m) 0 calc(var(--space-m) - var(--space-xs)) 0;
  }

  /*
   * Lists
   */
  $left: 2rem;

  ul,
  ol {
    list-style: none;
    margin: 1rem 0 1rem $left;
  }
  ol {
    counter-reset: ordered-counter;
  }
  // Consistent spacing between items
  ol > * + *,
  ul > * + * {
    margin-block-start: var(--space-xs);
  }
  // Consistent spacing inside items
  li > * + * {
    margin-block-start: var(--space-xs);
  }
  // Replace standard item bullets/numbers with our own
  // and add in some spacing.
  ol > li::before,
  ul > li::before {
    float: left;
    margin-left: -$left;
  }
  ol > li::before {
    @extend %sans-serif;
    counter-increment: ordered-counter;
    content: counter(ordered-counter);
  }
  ul > li::before {
    @extend %sans-serif;
    content: "â€¢";
  }
}
