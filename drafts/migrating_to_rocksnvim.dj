---toml
title = "Migrating to rocks.nvim"
tags = ["Neovim"]
---

My relationship with my [Neovim config][] is best described as a [On-again, off-again relationship][].
At times I'm deeply in love and spend all my time caressing the config---like how in September I [did a complete rewrite in Lua][]---while other times I'm busy with other love interests and the config is left alone, sometimes for months or even years.

While not as intense as the September affair, I recently got back together with my config to migrate her from the "old and boring" [lazy.nvim][] package manager to the new and exciting [rocks.nvim][].
It wasn't all smooth sailing but with some patience---and a drink or two---our threesome with [rocks.nvim][] was quite enjoyable.

::: note
There's nothing wrong with [lazy.nvim][]---it's great.\
Sometimes I just want to try out new things.
:::

# Why [rocks.nvim][]?

To be honest, the biggest reason I started looking into [rocks.nvim][] was that my brain---for some weird reason---tends to _get stuck_ thinking of things.
Rewriting my config wasn't something I wanted to do but it's not easy to escape when the brain has locked onto something.

Luckily, this time my brain locked onto something a little productive as [rocks.nvim][] has some nice and ambitious features.

## Benefits over other package managers

A. Avoids manual dependency management.

   With other package managers you as a user have to specify the dependencies for the plugin.
   Using [lazy.nvim][] it might look like this:

   ```lua
   return {
     "NeogitOrg/neogit",
      dependencies = {
        "nvim-lua/plenary.nvim",
        "nvim-telescope/telescope.nvim",
        "sindrets/diffview.nvim",
      },
      opts = opts,
   }
   ```

   There are several issues with this:

   1. It's annoying.
   1. You need to babysit the config if the plugin adds or removes a dependency.
   1. The plugin might break if there's a breaking change in a dependency.
   1. What if you have several plugins that depend on a different version of a dependency?
      (You're going to have a bad time.)

   [rocks.nvim][] moves the dependency management to the plugin, so we can just specify the plugin itself:

   ```toml
   "neo-tree.nvim" = "3.26"
   ```

   This makes plugin management easier and together with [SemVer][] versioning should reduce the risk of plugins breaking after updating them.

A. [rocks.nvim][] supports loading Lua packages from [luarocks][].

   Lua is a neat little language but it's very bare-bones and doesn't include a large standard library.
   Neovim has been incorporating more and more utility functions---such as `vim.split` and `vim.fs.joinpath()`---but there are still plenty of functionality that we need to import.
   That's why utility plugins such as [plenary.nvim][] exists and is a dependency to a lot of different plugins.

   With [luarocks][] you get access to many more libraries; for example a [yaml][] and a [toml][] library that would've saved my [from parsing them with a regex][toml-regex].

In short, [rocks.nvim][] behaves like you'd expect a package manager to behave if you come from an ecosystem blessed with modern package management (such as Cargo for Rust or Mix for Elixir).

## Drawbacks compared to [lazy.nvim][]

Naturally, it's not all fun and games and there are drawbacks to [rocks.nvim][] compared to [lazy.nvim][]:

a. Most plugins don't have a rockspec that define their dependencies, meaning you still need to manage the dependencies yourself, forgoing the biggest benefit of [rocks.nvim][].

a. Installing and updating packages feels slower.

a. You must manage lazy loading manually. I've seen rumors of lazy loading support for [rocks.nvim][] but as I'm writing this post there's nothing released yet.

a. [rocks.nvim][] is newer than [lazy.nvim][]; meaning less fancy features, more bugs, and more rough edges.

While I think that [rocks.nvim][] is taking a necessary and difficult step forward for Neovim package managers, there are valid reasons to still stick with [lazy.nvim][].

# Installation

```lua
do
  -- Specifies where to install/use rocks.nvim
  local install_location = vim.fs.joinpath(vim.fn.stdpath("data"), "rocks")

  -- Set up configuration options related to rocks.nvim (recommended to leave as default)
  local rocks_config = {
    rocks_path = vim.fs.normalize(install_location),
    luarocks_binary = vim.fs.joinpath(install_location, "bin", "luarocks"),
  }

  vim.g.rocks_nvim = rocks_config

  -- Configure the package path (so that plugin code can be found)
  local luarocks_path = {
    vim.fs.joinpath(rocks_config.rocks_path, "share", "lua", "5.1", "?.lua"),
    vim.fs.joinpath(rocks_config.rocks_path, "share", "lua", "5.1", "?", "init.lua"),
  }
  package.path = package.path .. ";" .. table.concat(luarocks_path, ";")

  -- Configure the C path (so that e.g. tree-sitter parsers can be found)
  local luarocks_cpath = {
    vim.fs.joinpath(rocks_config.rocks_path, "lib", "lua", "5.1", "?.so"),
    vim.fs.joinpath(rocks_config.rocks_path, "lib64", "lua", "5.1", "?.so"),
  }
  package.cpath = package.cpath .. ";" .. table.concat(luarocks_cpath, ";")

  -- Load all installed plugins, including rocks.nvim itself
  vim.opt.runtimepath:append(
    vim.fs.joinpath(rocks_config.rocks_path, "lib", "luarocks", "rocks-5.1", "rocks.nvim", "*")
  )
end

-- If rocks.nvim is not installed then install it!
if not pcall(require, "rocks") then
  local rocks_location = vim.fs.joinpath(vim.fn.stdpath("cache"), "rocks.nvim")

  if not vim.uv.fs_stat(rocks_location) then
    -- Pull down rocks.nvim
    vim.fn.system({
      "git",
      "clone",
      "--filter=blob:none",
      "https://github.com/nvim-neorocks/rocks.nvim",
      rocks_location,
    })
  end

  -- If the clone was successful then source the bootstrapping script
  assert(
    vim.v.shell_error == 0,
    "rocks.nvim installation failed. Try exiting and re-entering Neovim!"
  )

  vim.cmd.source(vim.fs.joinpath(rocks_location, "bootstrap.lua"))

  vim.fn.delete(rocks_location, "rf")
end

```

# Basic setup

```toml
[plugins]
"rocks.nvim" = "2.29.0"
```

## Separate config file per plugin

```toml
[plugins]
"rocks-config.nvim" = "scm"
```

## Git dependencies

```toml
[plugins]
"rocks-git.nvim" = "scm"
```

# Lazy load?

{path="lua/config/lazy.lua"}
```lua
local autocmd = vim.api.nvim_create_autocmd
local augroup = vim.api.nvim_create_augroup

autocmd({ "BufReadPre", "BufNewFile" }, {
  pattern = "*",
  group = augroup("lazy_plugins.lspconfig", { clear = true }),
  callback = function(opts)
    require("lazy_plugins.lspconfig")
  end,
})
```

{path="lua/lazy_plugins/lspconfig.lua"}
```lua
require("elixir").setup({
  credo = {
    enable = true,
    capabilities = capabilities,
    on_attach = on_attach
  },
  elixirls = {
    enable = true,
    settings = require("elixir.elixirls").settings({
      dialyzerEnabled = true,
      enableTestLenses = true,
      suggestSpecs = true,
      fetchDeps = true,
    }),
    capabilities = capabilities,
    on_attach = on_attach,
  },
})

-- And other lsp related setup in the file.
```

# Order dependencies

```lua
require("telescope").load_extension("fzf")
```

Move it to `after/plugin/telescope-fzf-native.lua`

# How to build a plugin with make?

{path="after/plugin/telescope-fzf-native.lua"}
```lua
require("nio").run(function()
  -- Maybe there's a better way to find the package location?
  local package_path =
    vim.fs.joinpath(
      vim.fn.stdpath("data"),
      "site/pack/rocks/start",
      "telescope-fzf-native.nvim/"
    )

  -- Before loading the extension we need to build it with `make`.
  require("nio").process.run({
    cmd = "make",
    args = {},
    cwd = package_path,
  })
  require("telescope").load_extension("fzf")
end)
```

Also, how to run make?

# Issues

## Treesitter issues

Couldn't use o

```lua
require("nvim-treesitter.configs").setup({
  auto_install = true,
  highlight = {
    enable = true,
  },
  matchup = {
    enable = true,
  },
  autotag = {
    enable = true,
  },
  endwise = {
    enable = true,
  },
  indent = {
    enable = true,
  },
  textobjects = {
    move = {
      enable = true,
      set_jumps = true,
      goto_next_start = keymaps.ts_goto_next_start,
      goto_next_end = keymaps.ts_goto_next_end,
      goto_previous_start = keymaps.ts_goto_previous_start,
      goto_previous_end = keymaps.ts_goto_previous_end,
    },
    swap = {
      enable = true,
      swap_next = keymaps.ts_swap_next,
      swap_previous = keymaps.ts_swap_previous,
    },
    select = {
      enable = true,
      lookahead = true,
      keymaps = keymaps.ts_select,
    },
  },
})
```

1. [Invalid node type][invalid-node-type]

2. Many parsers failed to compile

```
nvim-treesitter[bass]: Failed to execute the following command:
{
  cmd = "mv",
  opts = {
    args = { "-f", "tree-sitter-bass-tmp/tree-sitter-bass-master", "tree-sitter-bass" },
    cwd = "/home/tree/.local/share/nvim",
    stdio = {
      [2] = <userdata 1>,
      [3] = <userdata 2>
    }
  }
}
mv: cannot stat 'tree-sitter-bass-tmp/tree-sitter-bass-master': No such file or directory
```

```toml
nvim-treesitter = { git = "nvim-treesitter/nvim-treesitter", rev = "1eabe69" }
nvim-treesitter-endwise = { git = "RRethy/nvim-treesitter-endwise", rev = "8b34305" }
nvim-ts-context-commentstring = { git = "JoosepAlviste/nvim-ts-context-commentstring", rev = "0bdccb9" }
nvim-treesitter-context = { git = "nvim-treesitter/nvim-treesitter-context", rev = "55e2908" }
nvim-ts-autotag = { git = "windwp/nvim-ts-autotag", rev = "aeb7090" }
nvim-treesitter-textobjects = { git = "nvim-treesitter/nvim-treesitter-textobjects", rev = "5f9bf4b" }
```

## Random issues

`~/.local/share/nvim/` `~/.cache/nvim/`

- dial/gitsigns gave weird errors, use git works well.
- rocks help doesn't exist (it does now...)
- neo-tree steals oil prio (disable netrw takeover in neo-tree)
- How to add telescope-fzf-native?
- Didn't respect git branch during checkout

[yaml]: https://luarocks.org/modules/gaspard/yaml
[toml]: https://luarocks.org/modules/LebJe/toml
[luarocks]: https://luarocks.org/
[rocks.nvim]: https://github.com/nvim-neorocks/rocks.nvim
[lazy.nvim]: https://github.com/folke/lazy.nvim
[invalid-node-type]: https://github.com/nvim-treesitter/nvim-treesitter/issues/6419
[On-again, off-again relationship]: https://en.wikipedia.org/wiki/On-again,_off-again_relationship
[did a complete rewrite in Lua]: http://localhost:8080/blog/2023/10/01/rewriting_my_neovim_config_in_lua/
[toml-regex]: /blog/2024/05/08/browse_posts_with_telescopenvim#Finding-the-post-data-to-populate-the-picker
[plenary.nvim]: https://github.com/nvim-lua/plenary.nvim


