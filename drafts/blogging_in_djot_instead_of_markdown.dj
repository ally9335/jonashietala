---
title: "Blogging in Djot instead of Markdown"
tags: ["Djot", "Webpage", "Rust"]
---

I recently happened to see an offhand comment on [Hacker News][] about a markup language called [Djot][].
I don't really have any large issues with the {-Markdown-} [CommonMark][] I use to generate the posts for this website, but my brain saw a chance to get sidetracked yet again, and here we are.

I spent some hours to port my hacky custom markup extensions to Djot and started to write my posts in Djot.
Having used Markdown for many years, I'm still not comfortable with some of Djot's different syntax choices, but it ...

# What and why Djot?

The creator of Djot is John MacFarlane, the same philosophy professor that also created [Pandoc][] and [CommonMark][].
These might be two of the most influential projects in the markup space, so you'd get the feeling that there should be a good reason for [Djot][]'s creation.

The rationale for [Djot][] is specified in the [GitHub repo][Djot] and references his blog post [Beyond Markdown][] that inspired the whole project.

If I should make an attempt to summarize the goals of [Djot][], I'd say that Djot tries to fix flaws of CommonMark in two areas:

1. It's much easier to parse.

  {author="John Macfarlane"}
  > So, to fully specify emphasis parsing, we need additional rules. The 17 discouragingly complex rules in the CommonMark spec are intended to force the sorts of readings that humans will find most natural.

  17 rules just to parse emphasis sounds like fun times...

  At least it's better than Markdown that's ambiguous.

1. More features than CommonMark.

   For instance proper support for footnotes, math, divs, and attributes that can be applied to any element.

I'm sympathetic to the parsing problem, and for that alone I was willing to at least try it out.
But what really sold me was first-class support for attributes and divs, something I've added ugly hacks to work around.

If I'm going to bring up the negative parts, it's that for a regular user Djot mostly fixes edge-cases.
For me, 95% of the time it's just like writing Markdown, and (unfortunately) it'll have difficulties overcoming the "good enough" barrier of the various flavors of Markdown.

# Tools

Given that Djot is a relatively young project, I expected the tooling to be lacking.
There are for sure some things missing, but it wasn't so bad for my use-case.

I found a Djot Sublime Text grammar I can use for syntax highlighting the blog,
and there is Vim syntax highlighting in the [Djot repo][Djot].

(Sad for those who don't use Vim I guess.)

More annoying is that there's no treesitter implementation for Djot.
This is unfortunate, as with treesitter I get proper syntax highlighting inside code blocks for Markdown and I have a general treesitter jump command that, for Markdown, jumps between headers with `]g` and `[g`.
(In Rust it jumps between structs, implementations, enums, and functions.)

Not a deal-breaker of course.
Using the Markdown treesitter works well enough for the time being.
(Maybe I need to explore how treesitter grammars work one day, and create one for Djot.)

As for parsing I found [Jotdown][], which is a Rust library with an API inspired by [pulldown-cmark][], the library I use to parse CommonMark.

# Abstracting away markup parsing

# Customized markup

For the blog I have some [markup transformations][] I apply to Markdown.
This includes demoting headers (they only `h1` i want is the post title), embedding bare YouTube links and prettifying code markup.

It's a bit hacky though.

## Epigraphs

For example, I want to be able to turn a quote into an epigraph by wrapping it inside a div:

```html
<div class="epigraph">
  <blockquote>
    <p>This is an epigraph</p>
  </blockquote>
</div>
```

But the parser doesn't process markdown inside html, so I [added an attribute parser][extending-pulldown_cmark] to wrap a quote in an epigraph:

```markdown
> This is an epigraph
{ :epigraph }
```

The implementation isn't pretty, and only works for specific elements such as a blockquote.
But Djot has a built-in syntax for divs, so I can just write this to produce the same epigraph html output:

```djot
::: epigraph
> This is an epigraph
:::
```

## Asides

I still need to do a bunch of transformations to reproduce existing functionality.

For instance, for notices I want html output like this:

```html
<aside>
  <p>This is a notice</p>
</aside>
```

The `div` system works well here, so I can use this kind of input:

```djot
::: notice
This is a notice
:::
```

And then match on the `notice` class to transform the `div` into `aside`.

In [Jotdown][], like with [pulldown-cmark][], transformations are made by transforming iterators over events.
It's a bit awkward, so keeping the transformations small is a nice win.

## Images

I used the same syntax in Markdown to create collections of images:

```markdown
::: Flex
/images/configura14/octree1.png{ height=300 }
/images/configura14/octree2.png{ height=300 }
:::
```

This would wrap the images in a flex container to display them side-by-side:

::: flex
![](/images/configura14/octree1.png){ height=300 }
![](/images/configura14/octree2.png){ height=300 }
:::

```html
<figure class="flex-50">
  <a href="/images/configura14/octree1.png"><img height="300" alt="" src="/images/configura14/octree1.png"></a>
  <a href="/images/configura14/octree2.png"><img height="300" alt="" src="/images/configura14/octree2.png"></a>
</figure>
```

I (naturally) used to do this with Regex in a preprocessor step,
and had some fun adding attribute parsing.

Now all I do is transform the `div` to a `figure` with the proper class.
Even something like this with references outside and attributes works now, without any special handling on my end:

```djot
::: flex
![][one]{ height=300 }
![][two]{ height=300 }
:::

[one]: /images/configura14/octree1.png
[two]: /images/configura14/octree2.png
```

(Yeah maybe I gloss over the gross implementation a little.)

## Other transformations

There are other transformations I do with Djot as well:

```rust
pub fn djot_to_html(djot: &str) -> Result<String> {
    let transformed = Parser::new(djot);
    // Demote headers (eg h1 -> h2) and give them an "a" tag.
    let transformed = TransformHeaders::new(transformed);
    // Convert standalone images to figures.
    let transformed = AutoFigures::new(transformed);
    // Embed raw youtube links using iframes.
    let transformed = EmbedYoutube::new(transformed);
    // Syntax highlighting.
    let transformed = CodeBlockSyntaxHighlight::new(transformed);
    let transformed = InlineCodeSyntaxHighlight::new(transformed);
    // Transform divs, such as asides and figures.
    let transformed = DivTransforms::new(transformed);
    // Add a <footer> with author info to quotes.
    let transformed = QuoteTransforms::new(transformed);

    let mut body = String::new();
    Renderer::default().push(transformed, &mut body)?;
    Ok(body)
}
```

The ones I didn't bring up in the blog are pretty similar to their previous implementations.
I'm not going to go through them in detail, see the source code if you're interested.

[CommonMark]: https://commonmark.org/
[Pandoc]: https://pandoc.org/
[Beyond Markdown]: https://johnmacfarlane.net/beyond-markdown.html
[Djot]: https://github.com/jgm/djot
[pulldown-cmark]: https://crates.io/crates/pulldown-cmark
[Jotdown]: https://github.com/hellux/jotdown
[markup transformations]: /blog/2022/08/29/rewriting_my_blog_in_rust_for_fun_and_profit/#markdown-transformations
[extending-pulldown_cmark]: /blog/2022/08/29/rewriting_my_blog_in_rust_for_fun_and_profit/#extending-pulldown_cmark
